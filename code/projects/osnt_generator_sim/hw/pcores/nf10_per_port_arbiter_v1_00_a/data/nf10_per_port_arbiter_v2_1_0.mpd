###################################################################
##
## Name     : nf10_per_port_arbiter
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN nf10_per_port_arbiter

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = MIXED
OPTION IP_GROUP = OSNT
OPTION DESC = Per Port Arbiter
OPTION LONG_DESC = Per Port Arbiter


## Bus Interfaces
BUS_INTERFACE BUS = M_AXIS, BUS_STD = AXIS, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = S_AXIS_0, BUS_STD = AXIS, BUS_TYPE = TARGET, ISVALID = (C_S_NUM_QUEUES > 0)
BUS_INTERFACE BUS = S_AXIS_1, BUS_STD = AXIS, BUS_TYPE = TARGET, ISVALID = (C_S_NUM_QUEUES > 1)
BUS_INTERFACE BUS = S_AXIS_2, BUS_STD = AXIS, BUS_TYPE = TARGET, ISVALID = (C_S_NUM_QUEUES > 2)
BUS_INTERFACE BUS = S_AXIS_3, BUS_STD = AXIS, BUS_TYPE = TARGET, ISVALID = (C_S_NUM_QUEUES > 3)
BUS_INTERFACE BUS = S_AXIS_4, BUS_STD = AXIS, BUS_TYPE = TARGET, ISVALID = (C_S_NUM_QUEUES > 4)
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE

## Generics for VHDL or Parameters for Verilog
PARAMETER C_S_AXI_DATA_WIDTH = 32, BUS = S_AXI
PARAMETER C_S_AXI_ADDR_WIDTH = 32, BUS = S_AXI
PARAMETER C_BASEADDR = 0xffffffff, PAIR = C_HIGHADDR, ADDRESS = BASE, BUS = S_AXI
PARAMETER C_HIGHADDR = 0x00000000, PAIR = C_BASEADDR, ADDRESS = HIGH, BUS = S_AXI
PARAMETER C_S_AXI_ACLK_FREQ_HZ = 100000000, BUS = S_AXI
PARAMETER C_S_AXI_PROTOCOL = AXI4LITE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, DT = STRING, BUS = S_AXI
PARAMETER C_USE_WSTRB = 0, DT = INTEGER, RANGE = (0:1), BUS = S_AXI
PARAMETER C_DPHASE_TIMEOUT = 8, DT = INTEGER, RANGE = (0:512), BUS = S_AXI
PARAMETER C_M_AXIS_DATA_WIDTH = 256, BUS = M_AXIS
PARAMETER C_M_AXIS_TUSER_WIDTH = 128, BUS = M_AXIS
PARAMETER C_S_AXIS_DATA_WIDTH = 256, BUS = S_AXIS_0:S_AXIS_1:S_AXIS_2:S_AXIS_3:S_AXIS_4
PARAMETER C_S_AXIS_TUSER_WIDTH = 128, BUS = S_AXIS_0:S_AXIS_1:S_AXIS_2:S_AXIS_3:S_AXIS_4
PARAMETER C_S_NUM_QUEUES = 5, DT = INTEGER, RANGE = (0:5), BUS = S_AXIS_0:S_AXIS_1:S_AXIS_2:S_AXIS_3:S_AXIS_4

## Ports
PORT axi_aclk = "", DIR = I, SIGIS = CLK, BUS = M_AXIS:S_AXIS_0:S_AXIS_1:S_AXIS_2:S_AXIS_3:S_AXIS_4:S_AXI
PORT axi_aresetn = "", DIR = I, SIGIS = RST

PORT s_axi_awaddr = AWADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT s_axi_awvalid = AWVALID, DIR = I, BUS = S_AXI
PORT s_axi_wdata = WDATA, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT s_axi_wstrb = WSTRB, DIR = I, VEC = [((C_S_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT s_axi_wvalid = WVALID, DIR = I, BUS = S_AXI
PORT s_axi_bready = BREADY, DIR = I, BUS = S_AXI
PORT s_axi_araddr = ARADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT s_axi_arvalid = ARVALID, DIR = I, BUS = S_AXI
PORT s_axi_rready = RREADY, DIR = I, BUS = S_AXI
PORT s_axi_arready = ARREADY, DIR = O, BUS = S_AXI
PORT s_axi_rdata = RDATA, DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT s_axi_rresp = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT s_axi_rvalid = RVALID, DIR = O, BUS = S_AXI
PORT s_axi_wready = WREADY, DIR = O, BUS = S_AXI
PORT s_axi_bresp = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT s_axi_bvalid = BVALID, DIR = O, BUS = S_AXI
PORT s_axi_awready = AWREADY, DIR = O, BUS = S_AXI

PORT m_axis_tdata = TDATA, DIR = O, VEC = [C_M_AXIS_DATA_WIDTH-1:0], BUS = M_AXIS, ENDIAN = LITTLE
PORT m_axis_tstrb = TSTRB, DIR = O, VEC = [(C_M_AXIS_DATA_WIDTH/8)-1:0], BUS = M_AXIS, ENDIAN = LITTLE
PORT m_axis_tuser = TUSER, DIR = O, VEC = [C_M_AXIS_TUSER_WIDTH-1:0], BUS = M_AXIS, ENDIAN = LITTLE
PORT m_axis_tvalid = TVALID, DIR = O, BUS = M_AXIS
PORT m_axis_tready = TREADY, DIR = I, BUS = M_AXIS
PORT m_axis_tlast = TLAST, DIR = O, BUS = M_AXIS

PORT s_axis_tdata_0 = TDATA, DIR = I, VEC = [C_S_AXIS_DATA_WIDTH-1:0], BUS = S_AXIS_0, ENDIAN = LITTLE, ISVALID = (C_S_NUM_QUEUES > 0)
PORT s_axis_tstrb_0 = TSTRB, DIR = I, VEC = [(C_S_AXIS_DATA_WIDTH/8)-1:0], BUS = S_AXIS_0, ENDIAN = LITTLE, ISVALID = (C_S_NUM_QUEUES > 0)
PORT s_axis_tuser_0 = TUSER, DIR = I, VEC = [C_S_AXIS_TUSER_WIDTH-1:0], BUS = S_AXIS_0, ENDIAN = LITTLE, ISVALID = (C_S_NUM_QUEUES > 0)
PORT s_axis_tvalid_0 = TVALID, DIR = I, BUS = S_AXIS_0, ISVALID = (C_S_NUM_QUEUES > 0)
PORT s_axis_tready_0 = TREADY, DIR = O, BUS = S_AXIS_0, ISVALID = (C_S_NUM_QUEUES > 0)
PORT s_axis_tlast_0 = TLAST, DIR = I, BUS = S_AXIS_0, ISVALID = (C_S_NUM_QUEUES > 0)

PORT s_axis_tdata_1 = TDATA, DIR = I, VEC = [C_S_AXIS_DATA_WIDTH-1:0], BUS = S_AXIS_1, ENDIAN = LITTLE, ISVALID = (C_S_NUM_QUEUES > 1)
PORT s_axis_tstrb_1 = TSTRB, DIR = I, VEC = [(C_S_AXIS_DATA_WIDTH/8)-1:0], BUS = S_AXIS_1, ENDIAN = LITTLE, ISVALID = (C_S_NUM_QUEUES > 1)
PORT s_axis_tuser_1 = TUSER, DIR = I, VEC = [C_S_AXIS_TUSER_WIDTH-1:0], BUS = S_AXIS_1, ENDIAN = LITTLE, ISVALID = (C_S_NUM_QUEUES > 1)
PORT s_axis_tvalid_1 = TVALID, DIR = I, BUS = S_AXIS_1, ISVALID = (C_S_NUM_QUEUES > 1)
PORT s_axis_tready_1 = TREADY, DIR = O, BUS = S_AXIS_1, ISVALID = (C_S_NUM_QUEUES > 1)
PORT s_axis_tlast_1 = TLAST, DIR = I, BUS = S_AXIS_1, ISVALID = (C_S_NUM_QUEUES > 1)

PORT s_axis_tdata_2 = TDATA, DIR = I, VEC = [C_S_AXIS_DATA_WIDTH-1:0], BUS = S_AXIS_2, ENDIAN = LITTLE, ISVALID = (C_S_NUM_QUEUES > 2)
PORT s_axis_tstrb_2 = TSTRB, DIR = I, VEC = [(C_S_AXIS_DATA_WIDTH/8)-1:0], BUS = S_AXIS_2, ENDIAN = LITTLE, ISVALID = (C_S_NUM_QUEUES > 2)
PORT s_axis_tuser_2 = TUSER, DIR = I, VEC = [C_S_AXIS_TUSER_WIDTH-1:0], BUS = S_AXIS_2, ENDIAN = LITTLE, ISVALID = (C_S_NUM_QUEUES > 2)
PORT s_axis_tvalid_2 = TVALID, DIR = I, BUS = S_AXIS_2, ISVALID = (C_S_NUM_QUEUES > 2)
PORT s_axis_tready_2 = TREADY, DIR = O, BUS = S_AXIS_2, ISVALID = (C_S_NUM_QUEUES > 2)
PORT s_axis_tlast_2 = TLAST, DIR = I, BUS = S_AXIS_2, ISVALID = (C_S_NUM_QUEUES > 2)

PORT s_axis_tdata_3 = TDATA, DIR = I, VEC = [C_S_AXIS_DATA_WIDTH-1:0], BUS = S_AXIS_3, ENDIAN = LITTLE, ISVALID = (C_S_NUM_QUEUES > 3)
PORT s_axis_tstrb_3 = TSTRB, DIR = I, VEC = [(C_S_AXIS_DATA_WIDTH/8)-1:0], BUS = S_AXIS_3, ENDIAN = LITTLE, ISVALID = (C_S_NUM_QUEUES > 3)
PORT s_axis_tuser_3 = TUSER, DIR = I, VEC = [C_S_AXIS_TUSER_WIDTH-1:0], BUS = S_AXIS_3, ENDIAN = LITTLE, ISVALID = (C_S_NUM_QUEUES > 3)
PORT s_axis_tvalid_3 = TVALID, DIR = I, BUS = S_AXIS_3, ISVALID = (C_S_NUM_QUEUES > 3)
PORT s_axis_tready_3 = TREADY, DIR = O, BUS = S_AXIS_3, ISVALID = (C_S_NUM_QUEUES > 3)
PORT s_axis_tlast_3 = TLAST, DIR = I, BUS = S_AXIS_3, ISVALID = (C_S_NUM_QUEUES > 3)

PORT s_axis_tdata_4 = TDATA, DIR = I, VEC = [C_S_AXIS_DATA_WIDTH-1:0], BUS = S_AXIS_4, ENDIAN = LITTLE, ISVALID = (C_S_NUM_QUEUES > 4)
PORT s_axis_tstrb_4 = TSTRB, DIR = I, VEC = [(C_S_AXIS_DATA_WIDTH/8)-1:0], BUS = S_AXIS_4, ENDIAN = LITTLE, ISVALID = (C_S_NUM_QUEUES > 4)
PORT s_axis_tuser_4 = TUSER, DIR = I, VEC = [C_S_AXIS_TUSER_WIDTH-1:0], BUS = S_AXIS_4, ENDIAN = LITTLE, ISVALID = (C_S_NUM_QUEUES > 4)
PORT s_axis_tvalid_4 = TVALID, DIR = I, BUS = S_AXIS_4, ISVALID = (C_S_NUM_QUEUES > 4)
PORT s_axis_tready_4 = TREADY, DIR = O, BUS = S_AXIS_4, ISVALID = (C_S_NUM_QUEUES > 4)
PORT s_axis_tlast_4 = TLAST, DIR = I, BUS = S_AXIS_4, ISVALID = (C_S_NUM_QUEUES > 4)

END
