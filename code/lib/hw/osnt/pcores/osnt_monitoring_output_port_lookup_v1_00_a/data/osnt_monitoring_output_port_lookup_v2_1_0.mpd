################################################################################
#
#  NetFPGA-10G http://www.netfpga.org
#
#  File:
#        osnt_monitoring_output_port_lookup_v1_10_0.mpd
#
#  Library:
#        hw/osnt/pcores/osnt_monitoring_output_port_lookup_v1_00_a
#
#  Author:
#        Gianni Antichi
#
#  Description:
#        Microprocessor Peripheral Description File
#
#  Copyright notice:
#        Copyright (C) 2010, 2011 The Board of Trustees of The Leland Stanford
#                                 Junior University
#
#  Licence:
#        This file is part of the NetFPGA 10G development base package.
#
#        This file is free code: you can redistribute it and/or modify it under
#        the terms of the GNU Lesser General Public License version 2.1 as
#        published by the Free Software Foundation.
#
#        This package is distributed in the hope that it will be useful, but
#        WITHOUT ANY WARRANTY; without even the implied warranty of
#        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#        Lesser General Public License for more details.
#
#        You should have received a copy of the GNU Lesser General Public
#        License along with the NetFPGA source package.  If not, see
#        http://www.gnu.org/licenses/.
#
#

BEGIN osnt_monitoring_output_port_lookup

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION HDL = MIXED
OPTION USAGE_LEVEL = BASE_USER
OPTION STYLE = MIX
OPTION RUN_NGCBUILD = TRUE
OPTION IMP_NETLIST = TRUE
OPTION IP_GROUP = OSNT
OPTION DESC = OSNT Output Port Lookup
OPTION LONG_DESC = OSNT filtering and statistics

### Bus Interfaces
BUS_INTERFACE BUS = M_AXIS, BUS_STD = AXIS, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = S_AXIS, BUS_STD = AXIS, BUS_TYPE = TARGET
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE

### AXILITE Parameters
PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_BAR0_BASEADDR = 0xffffffff, DT = std_logic_vector, PAIR = C_BAR0_HIGHADDR, ADDRESS = BASE, BUS = S_AXI
PARAMETER C_BAR0_HIGHADDR = 0x00000000, DT = std_logic_vector, PAIR = C_BAR0_BASEADDR, ADDRESS = HIGH, BUS = S_AXI
PARAMETER C_BAR1_BASEADDR = 0xffffffff, DT = std_logic_vector, PAIR = C_BAR1_HIGHADDR, ADDRESS = BASE, BUS = S_AXI
PARAMETER C_BAR1_HIGHADDR = 0x00000000, DT = std_logic_vector, PAIR = C_BAR1_BASEADDR, ADDRESS = HIGH, BUS = S_AXI
PARAMETER C_FAMILY = virtex5, DT = STRING
PARAMETER C_S_AXI_PROTOCOL = AXI4LITE, DT = STRING, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_S_AXI_ACLK_FREQ_HZ = 100000000, DT = INTEGER, BUS = S_AXI, IO_IS = clk_freq, CLK_PORT = S_AXI_ACLK, CLK_UNIT = HZ, ASSIGNMENT = REQUIRE

### Generics for VHDL or Parameters for Verilog
PARAMETER C_M_AXIS_DATA_WIDTH = 256, DT = INTEGER, RANGE = (8,32,64,128,256), BUS = M_AXIS:S_AXIS
PARAMETER C_S_AXIS_DATA_WIDTH = 256, DT = INTEGER, RANGE = (8,32,64,128,256), BUS = M_AXIS:S_AXIS
PARAMETER C_M_AXIS_TUSER_WIDTH = 128, DT = INTEGER, RANGE = (128), BUS = M_AXIS:S_AXIS
PARAMETER C_S_AXIS_TUSER_WIDTH = 128, DT = INTEGER, RANGE = (128), BUS = M_AXIS:S_AXIS

### Generics for the Monitoring features
PARAMETER TIMESTAMP_WIDTH = 64, DT = INTEGER, RANGE = (64,128,256), BUS = M_AXIS:S_AXIS
PARAMETER TUPLE_WIDTH = 104, DT = INTEGER, BUS = M_AXIS:S_AXIS
PARAMETER NETWORK_PROTOCOL_COMBINATIONS = 4, DT = INTEGER, RANGE = (4,6,8), BUS = M_AXIS:S_AXIS
PARAMETER MAX_HDR_WORDS = 6, DT = INTEGER, RANGE = (4,5,6,7,8), BUS = M_AXIS:S_AXIS
PARAMETER DIVISION_FACTOR = 2, DT = INTEGER, RANGE = (2,4,8,16), BUS = M_AXIS:S_AXIS
PARAMETER BYTES_COUNT_WIDTH = 16, DT = INTEGER, RANGE = (16,32), BUS = M_AXIS:S_AXIS


## Registers offsets definitions
PARAMETER FILTER_TABLE_DEPTH = 16, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL

PARAMETER BAR0_STATS_RESET_OFFSET = 0x0, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR0_STATS_FREEZE_OFFSET = 0x4, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR0_PKT_COUNT_INTF0_OFFSET = 0x8, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR0_PKT_COUNT_INTF1_OFFSET = 0xc, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR0_PKT_COUNT_INTF2_OFFSET = 0x10, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR0_PKT_COUNT_INTF3_OFFSET = 0x14, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR0_BYTES_COUNT_INTF0_OFFSET = 0x18, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR0_BYTES_COUNT_INTF1_OFFSET = 0x1c, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR0_BYTES_COUNT_INTF2_OFFSET = 0x20, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR0_BYTES_COUNT_INTF3_OFFSET = 0x24, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR0_VLAN_COUNT_INTF0_OFFSET = 0x28, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR0_VLAN_COUNT_INTF1_OFFSET = 0x2c, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR0_VLAN_COUNT_INTF2_OFFSET = 0x30, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR0_VLAN_COUNT_INTF3_OFFSET = 0x34, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR0_IP_COUNT_INTF0_OFFSET = 0x38, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR0_IP_COUNT_INTF1_OFFSET = 0x3c, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR0_IP_COUNT_INTF2_OFFSET = 0x40, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR0_IP_COUNT_INTF3_OFFSET = 0x44, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR0_UDP_COUNT_INTF0_OFFSET = 0x48, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR0_UDP_COUNT_INTF1_OFFSET = 0x4c, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR0_UDP_COUNT_INTF2_OFFSET = 0x50, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR0_UDP_COUNT_INTF3_OFFSET = 0x54, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR0_TCP_COUNT_INTF0_OFFSET = 0x58, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR0_TCP_COUNT_INTF1_OFFSET = 0x5c, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR0_TCP_COUNT_INTF2_OFFSET = 0x60, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR0_TCP_COUNT_INTF3_OFFSET = 0x64, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR0_STATS_TIME_LOW_OFFSET = 0x68, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR0_STATS_TIME_HIGH_OFFSET = 0x6c, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL


PARAMETER BAR1_SIP_OFFSET = 0x0, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR1_SIP_MASK_OFFSET = 0x4, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR1_DIP_IP_OFFSET = 0x8, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR1_DIP_MASK_OFFSET = 0xc, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR1_L4_PORTS_OFFSET = 0x10, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR1_L4_PORTS_MASK_OFFSET = 0x14, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR1_PROTO_OFFSET = 0x18, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR1_PROTO_MASK_OFFSET = 0x1c, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR1_WR_ADDR_OFFSET = 0x20, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BAR1_RD_ADDR_OFFSET = 0x24, DT = std_logic_vector, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL


### Ports
PORT S_AXI_ACLK = "", DIR = I, SIGIS = CLK, BUS = M_AXIS:S_AXIS:S_AXI
PORT S_AXI_ARESETN = "", DIR = I, SIGIS = RST
PORT S_AXI_AWADDR = AWADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_AWVALID = AWVALID, DIR = I, BUS = S_AXI
PORT S_AXI_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WVALID = WVALID, DIR = I, BUS = S_AXI
PORT S_AXI_BREADY = BREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARADDR = ARADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_ARVALID = ARVALID, DIR = I, BUS = S_AXI
PORT S_AXI_RREADY = RREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARREADY = ARREADY, DIR = O, BUS = S_AXI
PORT S_AXI_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_RVALID = RVALID, DIR = O, BUS = S_AXI
PORT S_AXI_WREADY = WREADY, DIR = O, BUS = S_AXI
PORT S_AXI_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_BVALID = BVALID, DIR = O, BUS = S_AXI
PORT S_AXI_AWREADY = AWREADY, DIR = O, BUS = S_AXI

PORT M_AXIS_TDATA = TDATA, DIR = O, VEC = [C_M_AXIS_DATA_WIDTH-1:0], BUS = M_AXIS, ENDIAN = LITTLE
PORT M_AXIS_TSTRB = TSTRB, DIR = O, VEC = [(C_M_AXIS_DATA_WIDTH/8)-1:0], BUS = M_AXIS, ENDIAN = LITTLE
PORT M_AXIS_TUSER = TUSER, DIR = O, VEC = [C_M_AXIS_TUSER_WIDTH-1:0], BUS = M_AXIS, ENDIAN = LITTLE
PORT M_AXIS_TVALID = TVALID, DIR = O, BUS = M_AXIS
PORT M_AXIS_TREADY = TREADY, DIR = I, BUS = M_AXIS
PORT M_AXIS_TLAST = TLAST, DIR = O, BUS = M_AXIS

PORT S_AXIS_TDATA = TDATA, DIR = I, VEC = [C_S_AXIS_DATA_WIDTH-1:0], BUS = S_AXIS, ENDIAN = LITTLE
PORT S_AXIS_TSTRB = TSTRB, DIR = I, VEC = [(C_S_AXIS_DATA_WIDTH/8)-1:0], BUS = S_AXIS, ENDIAN = LITTLE
PORT S_AXIS_TUSER = TUSER, DIR = I, VEC = [C_S_AXIS_TUSER_WIDTH-1:0], BUS = S_AXIS, ENDIAN = LITTLE
PORT S_AXIS_TVALID = TVALID, DIR = I, BUS = S_AXIS
PORT S_AXIS_TREADY = TREADY, DIR = O, BUS = S_AXIS
PORT S_AXIS_TLAST = TLAST, DIR = I, BUS = S_AXIS

PORT STAMP_COUNTER = "", DIR = I, VEC = [TIMESTAMP_WIDTH-1:0]

end
